import pandas as pd
import streamlit as st
import json
from finder_class import Finder


with open("/app/argo_smart_search/webapp/data/featureset.json", "rb") as file:
    input_data = json.load(file)

display_dict = json.load(open('/app/argo_smart_search/webapp/data/display_dict.json', 'r'))
feature_dict = json.load(open('/app/argo_smart_search/webapp/data/full_features_dict.json', 'r'))
finder_instance = Finder(feature_dict, display_dict)
st.header("–ü–æ–∏—Å–∫–æ–≤–∏–∫ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º")
st.markdown("–ü—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π cls_token, –≤ —Ä–∞–º–∫–∞—Ö –∫–µ–π—Å–∞ **–û–û–û ¬´–°–û–õ–Æ–®–ù¬ª** —Ö–∞–∫–∞—Ç–æ–Ω–∞ \"–¶–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ—Ä—ã–≤. –°–µ–∑–æ–Ω: –ò–ò\"")
st.subheader("üë®‚Äçüåæ –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å")

location_feature = st.multiselect(
    "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (GEO)",
    input_data["location_feature"],
    [], max_selections=5)
climate_feature = st.selectbox(
    '–ö–ª–∏–º–∞—Ç',
    input_data["climate_feature"],
    )
soil = st.selectbox(
    '–ü–æ—á–≤–∞',
    input_data["soil"],
    )
chemicals_feature = st.multiselect(
    '–•–∏–º–∏—á–µ—Å–∫–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ –≤ —Ä–∞—Å—Ç–µ–Ω–∏–∏',
    input_data["chemicals_feature"],
    [], max_selections=5)
source_type = st.selectbox(
    '–í–∏–¥ —Å—ã—Ä—å—è',
    input_data["source_type"],
    )
calendar_month = st.multiselect(
    '–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–±–æ—Ä–∞, –º–µ—Å.',
    input_data["calendar_month"],
    [], max_selections=5)
max_type = st.multiselect(
    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è, –≥–æ–¥',
    input_data["max_type"],
    [], max_selections=5)
red_book_feature = st.checkbox('–û—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–∏–≥–æ–π')

find_button = st.button("–ù–∞–π—Ç–∏")



entity_attribures = {"location_feature": list(location_feature),
                     "climate_feature": list(climate_feature),
                     "red_book_feature": "1" if red_book_feature else [],
                     "chemicals_feature": list(chemicals_feature),
                     "soil": list(soil),
                     "source_type": list(source_type),
                     "calendar_month": list(calendar_month),
                     "max_type": list(max_type)}
st.divider()
if find_button:
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç")
    result = finder_instance.search(entity_attribures)

    for x in result:
        with st.expander(x["original_name"]):
            st.write("–ê—Ç—Ä–∏–±—É—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            st.markdown("**–ú–µ—Ç—Ä–∏–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞:  " + str(round(x["search_score"], 2))+"**")

            col1, col2, col3, col4, col5 = st.columns(5)
            col6, col7, col8 = st.columns(3)

            with col1:
                st.table(pd.DataFrame(x["entity_attributes"]["location_feature"],columns=["location_feature"]))
            with col2:
                st.table(pd.DataFrame(x["entity_attributes"]["climate_feature"], columns=["climate_feature"]))
            with col3:
                st.table(pd.DataFrame(x["entity_attributes"]["soil"], columns=["soil"]))
            with col4:
                st.table(pd.DataFrame(x["entity_attributes"]["chemicals_feature"], columns=["chemicals_feature"]))
            with col5:
                st.table(pd.DataFrame(x["entity_attributes"]["red_book_feature"], columns=["red_book_feature"]))
            with col6:
                st.table(pd.DataFrame(x["entity_attributes"]["calendar_month"], columns=["calendar_month"]))
            with col7:
                st.table(pd.DataFrame(x["entity_attributes"]["max_type"], columns=["max_type"]))
            with col8:
                st.table(pd.DataFrame(x["entity_attributes"]["calendar_month"], columns=["calendar_month"]))

            st.caption(x["entity_definition"])
else:
    st.write("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞–π—Ç–∏\"")

st.caption("Powered by cls_token")


